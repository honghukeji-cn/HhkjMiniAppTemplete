import React, {useEffect, useState,forwardRef} from 'react'
import {Image, Text, View} from "@tarojs/components";
import {ConfigProvider, Empty, Grid, InfiniteLoading, Loading} from "@nutui/nutui-react-taro";
import "./index.scss"
import ListViewProps from "../../props/ListViewProps";
import HttpResponseProps from "../../props/HttpResponseProps";
const ListView=(_props:ListViewProps,ref:any)=>{
  const {gap=10,columns=1,size=10}=_props;
  const [list,setList]=useState<any[]>([]);
  const [hasMore,setHasMore]=useState<boolean>(true);
  const [page,setPage]=useState<number>(1);
  useEffect(()=>{
      onRefresh();
  },[])
  const onRefresh=()=>{
    return loadData(1);
  }
  const loadMore=()=>{
     return loadData(page);
  }
  const loadData=(loadPage:number)=>{
    return new Promise((resolve)=>{
      _props.getData(loadPage,size,(res:HttpResponseProps<any>)=>{
        if(res.code==1)
        {
          let datas=loadPage==1?res.data.datas:list.concat(res.data.datas);
          setList(datas);
          setPage(loadPage+1);
          setHasMore(datas.length<res.data.all)
        }else{
          setHasMore(false);
        }
        resolve();
      });
    })
  }
  return (
    <View style={{flex:1}} >
      <InfiniteLoading
        hasMore={hasMore}
        pullRefresh={true}
        onRefresh={onRefresh}
        onLoadMore={loadMore}
        loadMoreText={<Text style={{color:"#333"}}>没有更多了</Text>}
        pullingText={<ConfigProvider theme={{ nutuiLoadingIconSize: '20px',nutuiLoadingIconColor:"#333" }}>
          <Loading type={"spinner"} ><Text style={{color:"#333"}}>正在刷新</Text></Loading>
        </ConfigProvider>}
        loadingText={<ConfigProvider theme={{ nutuiLoadingIconSize: '20px',nutuiLoadingIconColor:"#333" }}>
          <Loading type={"spinner"} ><Text style={{color:"#333"}}>正在加载中</Text></Loading>
        </ConfigProvider>}
      >
        {_props.renderHeader?_props.renderHeader():null}
        {list.length==0 &&
          <Empty image={<Image src={require("../../imgs/NO_DATA.png")} /> } />
        }
        <Grid gap={gap} columns={columns} direction={"horizontal"} style={{flex:1}}>
          {list.map((item,key)=>(
            <Grid.Item  className={"listViewItem"} >
              {_props.renderItem(item,key)}
            </Grid.Item>
          ))}
        </Grid>
      </InfiniteLoading>
    </View>
  )
}
export default forwardRef(ListView);
